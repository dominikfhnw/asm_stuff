true : ;yasm -f bin -o isvm $0 && ls -l isvm && chmod +x isvm && objdas isvm && ./isvm; echo ret $?; exit

;; true.asm: Copyright (C) 2001 Brian Raiter <breadbox@muppetlabs.com>
;; Licensed under the terms of the GNU General Public License, either
;; version 2 or (at your option) any later version.
;;
;; To build:
;;	nasm -f bin -o true true.asm && chmod +x true
;;	ln true false

BITS 32

%define DEBUG 0

%if DEBUG
%define dbg	call regdump
%else
%define dbg
%endif

		org	0x68604000

		db	0x7F, "ELF"
		dd	1
		dd	0
		dd	$$			; vaddr
		dw	2
		dw	3
		dd	_start -3		; garbage/filesz
		dd	_start -3		; start/memsz
	_start:	dd	4

		shl	eax, 30
		mov	edi, esp  
		sub	edi, 20

times $$-$+41   db      0x90
		test	eax, 0x10020

cpuid

xchg	eax,ebx

stosd
xchg	eax,ecx
stosd
xchg	eax,edx
stosd

push	10
pop	eax
stosb

pop	eax
xor	ebx,ebx
inc	ebx
mov	ecx, esp
sub	ecx, 24
dbg 
push	13
pop	edx

dbg

int	0x80
xchg	eax,ebx
xor	ebx,ebx
int	0x80

;; This is how the file looks when it is read as an (incomplete) ELF
;; header, beginning at offset 0:
;;
;; e_ident:	db	0x7F, "ELF"			; required
;;		db	1				; 1 = ELFCLASS32
;;		db	0				; (garbage)
;;		db	0				; (garbage)
;;		db	0				; (garbage)
;;		db	0x00, 0x00, 0x00, 0x00		; (unused)
;;		db	0x00, 0x00, 0x5F, 0x25
;; e_type:	dw	2				; 2 = ET_EXE
;; e_machine:	dw	3				; 3 = EM_386
;; e_version:	dd	0x2549001A			; (garbage)
;; e_entry:	dd	0x2549001A			; program starts here
;; e_phoff:	dd	4				; phdrs located here
;; e_shoff:	dd	0xAEF25F5B			; (garbage)
;; e_flags:	dd	0xFB5F2240			; (unused)
;; e_ehsize:	dw	0x80CD				; (garbage)
;; e_phentsize:	dw	0x20				; phdr entry size
;; e_phnum:	db	1				; one phdr in the table
;; e_shentsize:
;; e_shnum:
;; e_shstrndx:
;;
;; This is how the file looks when it is read as a program header
;; table, beginning at offset 4:
;;
;; p_type:	dd	1				; 1 = PT_LOAD
;; p_offset:	dd	0				; read from top of file
;; p_vaddr:	dd	0x25490000			; load at this address
;; p_paddr:	dd	0x00030002			; (unused)
;; p_filesz:	dd	0x2549001A			; too big, but ok
;; p_memsz:	dd	0x2549001A			; equal to file size
;; p_flags:	dd	4				; 4 = PF_R
;; p_align:	dd	0xAEF25F5B			; (garbage)
;;
;; Note that the top two bytes of the file's origin (0x49 0x25)
;; correspond to the instructions "dec ecx" and the first byte of "and
;; eax, IMM".
;;
;; The fields marked as unused are either specifically documented as
;; not being used, or not being used with 386-based implementations.
;; Some of the fields marked as containing garbage are not used when
;; loading and executing programs. Other fields containing garbage are
;; accepted because Linux currently doesn't examine then.

; input register as param %1 (except eax, ecx)
; output as string to edi
%macro tohex 1
	push    8               ; 8 hex digits
	pop     ecx

	.loop:                  ;do{
	rol     %1, 4           ; rotate high nibble to the bottom

	mov     eax, %1
	and     al, 0x0f        ; isolate low nibble
	cmp     al, 10          ; set CF according to digit>9
	sbb     al, 0x69        ; read CF, set CF and conditionally set AF, and wrap AL to > 99h
	das                     ; magic, which happens to work
	stosb                   ; *edi++ = al
	loop    .loop           ;}while(--ecx)
%endmacro

%if DEBUG
; 58 byte no label
; 69 byte count label
; 83 byte 1byte label
; 94 byte full label

; count labels: 11 bytes
; 1byte labels: 25 bytes	+14 bytes
; full  labels: 36 bytes	+11 bytes

; each of those adds 4 byte of code and 1*REGS of stack used
;%define SPACE 1
%define NEWLINE 1
%define EXTENDED 0

%define LABEL 2
%define ALTLABEL 0

%if LABEL || ALTLABEL
%define SPACE 1
%else
%define SPACE 0
%endif

%if LABEL && ALTLABEL
%error cant have LABEL and ALTLABEL together
%endif

%define REGS 9
%define RECORD (8 + LABEL + ALTLABEL + SPACE + NEWLINE + EXTENDED)
%define TOTAL ( (RECORD*REGS) + (1*NEWLINE) )
; eax ecx edx ebx esp ebp esi edi eflags
;  AX  CX  DX  BX  SP  BP  SI  DI  FL
;  A   C   D   B   S   P   s   d   f
;hlt

regdump:
pusha
pushf			; save processor state on stack

%if LABEL
call	.begin
.labels:
	%if LABEL == 2
	db "FLDISIBPSPBXDXCXAX"
	;db "fldisibpspbxdxcxax"
	%else
	db "fdsPSBDCA"
	%endif
.begin:
pop	esi
mov	edx, esp
%else
mov	esi, esp
%endif

%if ALTLABEL
push	'Z'
pop	edx
%endif

add	esp, -TOTAL
mov	edi, esp	; alloca

push	REGS
pop	ecx

.loop2:
%if EXTENDED
push	'E'
pop	eax
stosb			; whitespace
%endif

%if LABEL == 2
lodsw			; load description text
stosw			; store it
%elif LABEL == 1
lodsb			; load description text
stosb			; store it
%endif

%if ALTLABEL
mov	eax, edx
stosb
dec	edx
%endif

%if SPACE
push	0x20
pop	eax
stosb			; whitespace
%endif

%if LABEL
xchg	edx, esi	; switch back to the pusha registers on the stack
%endif

push	ecx

	;; clobbers: eax, ebx, ecx
	lodsd
	mov	ebx, eax

	tohex	ebx

pop	ecx

%if LABEL
xchg	edx, esi	; back again to description text
%endif

%if NEWLINE
push	0x0a
pop	eax
stosb
%endif

loop	.loop2

%if NEWLINE
stosb
%endif


push	4
pop	eax
push	1
pop	ebx
mov	ecx, esp     ; buf
push	TOTAL
pop	edx
int	0x80
add	esp, edx
popf
popa
ret

%endif
