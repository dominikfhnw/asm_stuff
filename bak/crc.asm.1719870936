true : ;yasm -f bin -o crc $0 && ls -l crc && chmod +x crc && objdump -b binary -m i386 -D crc  -z --adjust-vma=0x3d400000 --start-address=0x3d400019 && echo && echo "foo" | ./crc; echo ret $?; exit
;; true.asm: Copyright (C) 2001 Brian Raiter <breadbox@muppetlabs.com>
;; Licensed under the terms of the GNU General Public License, either
;; version 2 or (at your option) any later version.
;;
;; To build:
;;	nasm -f bin -o true true.asm && chmod +x true
;;	ln true false

; 40 inc eax
; 50 push eax (aka push 0)
; 60 pusha
; 90 nop
; b0 mov al, imm8

BITS 32

%define DEBUG 1

%if DEBUG
%define dbg_regdump	call regdump
%else
%define dbg_regdump
%endif
; input register as param %1 (except eax, ecx)
; output as string to edi
%macro tohex 1
	push	8		; 8 hex digits
	pop	ecx

	.loop:			;do{
	rol	%1, 4		; rotate high nibble to the bottom

	mov	eax, %1 
	and	al, 0x0f	; isolate low nibble
	cmp	al, 10		; set CF according to digit>9
	sbb	al, 0x69	; read CF, set CF and conditionally set AF, and wrap AL to > 99h
	das			; magic, which happens to work
	stosb			; *edi++ = al
	loop	.loop		;}while(--ecx)
%endmacro

		org	0x3d4ef000

		db	0x7F, "ELF"
		dd	1
		dd	0
		dd	$$			; vaddr
		dw	2
		dw	3
		dd	_start	-2		; garbage/filesz
		dd	_start	-2		; start/memsz
	_start:	dd	4

		;dec	esi
		inc	edx
		mov	ecx, esp
read:
		push	3
		pop	eax
		push	0

times $$-$+41   db      0x90
		test	eax, 0x10020
		int	0x80

		test	eax,eax
		jz	eof

		pop	eax
		crc32	esi, al
		
		jmp	read

eof:
		dbg_regdump
		sub	esp, 9
		mov	edi, esp
		tohex	esi
		push	0x0a
		pop	eax
		stosb

		dbg_regdump
		;push	4
		;pop	eax
		sub	al, 6
		;xor	ebx,ebx
		inc	ebx
		push	9
		pop	edx
		mov	ecx, esp
		int	0x80

		dbg_regdump
		xchg	eax, ebx
		xor	ebx, ebx
		dbg_regdump
		int	0x80


%if DEBUG
; 58 byte no label
; 69 byte count label
; 83 byte 1byte label
; 94 byte full label

; count labels: 11 bytes
; 1byte labels: 25 bytes	+14 bytes
; full  labels: 36 bytes	+11 bytes

; each of those adds 4 byte of code and 1*REGS of stack used
;%define SPACE 1
%define NEWLINE 1
%define EXTENDED 0

%define LABEL 2
%define ALTLABEL 0

%if LABEL || ALTLABEL
%define SPACE 1
%else
%define SPACE 0
%endif

%if LABEL && ALTLABEL
%error cant have LABEL and ALTLABEL together
%endif

%define REGS 9
%define RECORD (8 + LABEL + ALTLABEL + SPACE + NEWLINE + EXTENDED)
%define TOTAL ( (RECORD*REGS) + (1*NEWLINE) )
; eax ecx edx ebx esp ebp esi edi eflags
;  AX  CX  DX  BX  SP  BP  SI  DI  FL
;  A   C   D   B   S   P   s   d   f
;hlt

regdump:
pusha
pushf			; save processor state on stack

%if LABEL
call	.begin
.labels:
	%if LABEL == 2
	db "FLDISIBPSPBXDXCXAX"
	;db "fldisibpspbxdxcxax"
	%else
	db "fdsPSBDCA"
	%endif
.begin:
pop	esi
mov	edx, esp
%else
mov	esi, esp
%endif

%if ALTLABEL
push	'Z'
pop	edx
%endif

add	esp, -TOTAL
mov	edi, esp	; alloca

push	REGS
pop	ecx

.loop2:
%if EXTENDED
push	'E'
pop	eax
stosb			; whitespace
%endif

%if LABEL == 2
lodsw			; load description text
stosw			; store it
%elif LABEL == 1
lodsb			; load description text
stosb			; store it
%endif

%if ALTLABEL
mov	eax, edx
stosb
dec	edx
%endif

%if SPACE
push	0x20
pop	eax
stosb			; whitespace
%endif

%if LABEL
xchg	edx, esi	; switch back to the pusha registers on the stack
%endif

push	ecx

	;; clobbers: eax, ebx, ecx
	lodsd
	mov	ebx, eax

	tohex	ebx

pop	ecx

%if LABEL
xchg	edx, esi	; back again to description text
%endif

%if NEWLINE
push	0x0a
pop	eax
stosb
%endif

loop	.loop2

%if NEWLINE
stosb
%endif


push	4
pop	eax
push	1
pop	ebx
mov	ecx, esp     ; buf
push	TOTAL
pop	edx
int	0x80
add	esp, edx
popf
popa
ret

%endif


call regdump
mov eax, regdump
call eax
