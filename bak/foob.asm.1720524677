true : ;nasm -Lmes -l nasm.list -Iasmlib/ -f bin -o print $0 && ls -l print && chmod +x print && objdas print && echo strace -i ./print foobar; echo ret $?; exit
;true : ;nasm -Iasmlib/ -f bin -o print $0 && ls -l print && chmod +x print && objdump -Mintel -b binary -m i386 -D print --adjust-vma=0x3d400000 --start-address=0x3d400019 && echo strace -i ./print foobar; echo ret $?; exit

; debug build:
; nasm -I asmlib/ -f elf32 foob.asm
; ld -m elf_i386 -z noseparate-code foob.o
; sstrip to get it to +50 bytes of original

;; true.asm: Copyright (C) 2001 Brian Raiter <breadbox@muppetlabs.com>
;; Licensed under the terms of the GNU General Public License, either
;; version 2 or (at your option) any later version.
;;
;; To build:
;;	nasm -f bin -o true true.asm && chmod +x true
;;	ln true false

%define DEBUG 1
%define START _st2
%include "stdlib.mac"
%include "regdump.mac"

BASE	0x054a9000
ELF
ELF_PHDR full
_st2:

;dbg_regdump
%define func 1

%rep 0
%if func
	printstatic "hello"
%else
	printstr "hello"
%endif
%endrep

set	eax, $
printstatic "foo: "
add	esp, -128
mov	edi, esp

set	eax, 1234567898
set	eax, 123

%if 0
set	eax, 1000000000
push	eax
fild	dword [esp]
fldpi
fmulp
fbstp	[esp]
pop	eax
pop	ecx
dbg_regdump
exit
%endif

;set	eax, 4294967295
set	ebx, 10
;add	edi, 10
;std
dbg_regdump
.loop:
;doloop 10
	;printstatic "l"
	idiv	ebx
	;dbg_regdump
	%if 0
		xchg	eax, edx
		add	al, '0'
		;add	eax, '0'
		;lea	eax, [eax+'0']
		;lea	eax, [al+'0']
		;lea	al, [al+'0']
		;dbg_regdump
		stosb
		xchg	eax, edx
		;nop
	%else
		;add	dl, '0'
		;add	edx, '0'
		lea	edx, [edx+'0']
		;mov	[edi], [edx+'0']
		mov	[edi], dl
		inc	edi
	%endif
	;dbg_regdump
	;set	edx, 0
	;mov	dl, 0
	cdq
	test	eax, eax
;endloop
jnz .loop

;tohex	ebx

set	eax, `\n`
stosb
puts	esp, 128
exit

%if 0
test eax, eax
test ebx, ebx
test eax, 12
test ebx, 12
cmp eax, eax
cmp eax, 12
cmp ebx, ebx
cmp ebx, 12
cmp eax, 300
cmp ebx, 300

;MULTIPL
; 0
zero	eax
; 1
; 2
shl	eax, 1
; 3
lea	eax, [3*eax]
; 4
shl	eax, 2
; 5
lea	eax, [5*eax]
; 6
;lea	eax, [3*eax]
;shl	eax, 1
imul	eax, eax, 6
imul	eax, eax, 7
shl	eax, 3

zero	eax
zero	ecx
inc	eax
lea	eax, [eax*1]
lea	eax, [eax*1+ecx]
lea	eax,1[eax*1]
lea	eax, [eax*2]
add	eax, eax
shl	eax, 1
shl	eax, 2
lea	eax, [eax*2+ecx]
lea	eax,1[eax*2]
lea	eax, [eax*3]
;lea	eax, [eax*3+ecx]
lea	eax,1[eax*3]
;lea	eax, [eax*4]
lea	eax, [eax*4+ecx]
;lea	eax,1[eax*4]
lea	eax, [eax*5]
;lea	eax, [eax*5+ecx]
lea	eax,1[eax*5]
;lea	eax, [eax*8]
lea	eax, [eax*8+ecx]
;lea	eax,1[eax*8]
lea	eax, [eax*9]
;lea	eax, [eax*9+ecx]
lea	eax,1[eax*9]
dbg_regdump
exit
lea	eax, [eax+127]
zero	eax
lea	eax, [eax-1]
dbg_regdump
exit
set	eax,1
set	eax,12
exit

%endif
times 8 db 0

%include "regdump2.mac"
printstatic_func:
import_printstatic
