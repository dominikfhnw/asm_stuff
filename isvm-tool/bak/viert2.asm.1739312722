%if 0
set -e

OUT=viert
NASMOPT=
if [ -n "${LINCOM-}" ]; then
	OUT="$OUT.com"
	NASMOPT="-DLINCOM=1"
fi
if [ -n "${FULL-}" ]; then
	rm -f $OUT $OUT.o
	nasm -g -I asmlib/ -f elf32 -o $OUT.o "$0" $NASMOPT "$@" 2>&1 | grep -vF ': ... from macro '
	FLAGS="--print-map"
	FLAGS=
	ld $FLAGS -m elf_i386 -z noseparate-code $OUT.o -o $OUT
	cp $OUT $OUT.full
	ls -l $OUT.full
	sstrip $OUT
else
	rm -f $OUT
	nasm -I asmlib/ -f bin -o $OUT "$0" $NASMOPT "$@" 2>&1 | grep -vF ': ... from macro '
fi
ls -l $OUT
chmod +x $OUT

DUMP="-Mintel"
#DUMP="--no-addresses -Mintel"
if [ -n "${FULL-}" ]; then
	DUMP="$DUMP -j .text -j .rodata"
	objdump $DUMP -d $OUT.full
else
	OFF=$(  readelf2 -lW $OUT 2>/dev/null | awk '$2=="0x000000"{print $3}')
	#OFF="0x10000"
	START=$(readelf2 -hW $OUT 2>/dev/null | awk '$1=="Entry"{print $4}')
	objdump $DUMP -b binary -m i386 -D $OUT --adjust-vma="$OFF" --start-address="$START"
fi

set +e
ls -l $OUT
strace -frni ./$OUT
echo ret $?
exit

%endif

%define REG_OPT		1
%define REG_SEARCH	1
%define REG_ASSERT	0
%ifndef	LINCOM
%define LINCOM		0
%endif

%include "stdlib.mac"

%define	TABLE_OFFSET	edi
%define	CODE_OFFSET	esi
%define	NEXT_WORD	eax

%assign	WORD_COUNT	0
%define zero_seg	0

%ifndef WORD_NOTABLE
%define WORD_NOTABLE	1
%endif
%ifndef WORD_FOOBEL
%define WORD_FOOBEL	0
%endif
%ifndef WORD_SIZE
%define WORD_SIZE	1
%endif

%if   WORD_SIZE == 1
	%define lodsWORD lodsb
	%define WORD_TYPE byte
	%define WORD_DEF db
%elif WORD_SIZE == 2
	%define lodsWORD lodsw
	%define WORD_TYPE word
	%define WORD_DEF dw
%elif WORD_SIZE == 4
	%define lodsWORD lodsd
	%define WORD_TYPE dword
	%define WORD_DEF dd
%else
	%error illegal word size WORD_SIZE
%endif

; **** Macros ****
%macro NEXT 0
	%%next:
	%if WORD_NOTABLE && WORD_SIZE == 4
		%if WORD_FOOBEL
			; + just a single register for NEXT
			; - a bit bigger than the other solution
			lea	CODE_OFFSET, [CODE_OFFSET+4]
			jmp	[CODE_OFFSET]
		%else
			lodsWORD
			jmp	NEXT_WORD
		%endif
	%elif WORD_NOTABLE && WORD_SIZE == 2
		%if 0
			movzx	NEXT_WORD, word [CODE_OFFSET]
			add	NEXT_WORD, TABLE_OFFSET
			;add	CODE_OFFSET, WORD_SIZE
			inc	CODE_OFFSET
			inc	CODE_OFFSET
			jmp	NEXT_WORD
		%else
			lodsWORD
			cwde
			add	NEXT_WORD, TABLE_OFFSET
			jmp	NEXT_WORD
		%endif

	%elif 0
		;movzx	NEXT_WORD, byte [CODE_OFFSET]
		;inc	CODE_OFFSET
		set	NEXT_WORD, 0
		lodsWORD
		push	dword [TABLE_OFFSET + 4*NEXT_WORD]
		taint	NEXT_WORD
		ret
	%elif 0
		; + freely choose which registers to use
		; - every NEXT is 1 byte longer
		movzx	NEXT_WORD, WORD_TYPE [CODE_OFFSET]
		inc	CODE_OFFSET
		taint	NEXT_WORD
		jmp	[TABLE_OFFSET + 4*NEXT_WORD]
	%else
		%ifnidn NEXT_WORD,eax
			%error NEXT__WORD is not eax
		%endif
		%if WORD_SIZE == 1
			set	NEXT_WORD, 0
		%endif
		lodsWORD
		%if WORD_SIZE == 2
			cwde
		%endif
		jmp	[TABLE_OFFSET + 4*NEXT_WORD]
	%endif
	;mov	NEXT_WORD, [TABLE_OFFSET + 4*NEXT_WORD]
	;lea	NEXT_WORD, [TABLE_OFFSET + 4*NEXT_WORD]
	;jmp	NEXT_WORD
	;jmp	[NEXT_WORD]

%endmacro

%macro DEF 1-2
	%if %0 == 1
		NEXT
	%endif
	; objdump prints the lexicographical smallest label. change A to E
	; or something to get the DEFn labels
	A_%tok(%1):
	DEF%[WORD_COUNT]:
	%define %[f_%tok(%1)] WORD %[WORD_COUNT]
	rtaint
	%if WORD_SIZE == 1 || !WORD_NOTABLE
		rset	NEXT_WORD, WORD_COUNT
	%endif
	%assign WORD_COUNT WORD_COUNT+1
%endmacro

%macro WORD 1
	%if WORD_NOTABLE && WORD_SIZE == 4
		WORD_DEF DEF%1
	%elif WORD_NOTABLE && WORD_SIZE == 2
		WORD_DEF DEF%1 - DEF0
	%else
		WORD_DEF %1
	%endif
%endmacro

%if LINCOM
	[map all nasm.map]
	jmp _start
%endif

; **** Codeword definitions ****
; first definition does not need a NEXT
DEF "exit", no_next
	exit	x

; previous definition can never return, so no need for NEXT
DEF "heya", no_next
	printstr "HEYA"

DEF "sleep"
	sleep 1
DEF "rwx"
	rwx
DEF "pause"
	pause
DEF "reg"
	%xdefine OLD_DEBUG DEBUG	
	%xdefine DEBUG 0
	%include "regdump2.mac"
	%xdefine DEBUG OLD_DEBUG
	regdump_func

lastnext:
	NEXT


; **** Jump table ****
SECTION .rodata align=1 follows=.text
%if WORD_SIZE == 1 || !WORD_NOTABLE
	STATIC_TABLE:
	%warning WORD COUNT: WORD_COUNT
	%assign	i 0
	%rep	WORD_COUNT
		dd DEF%[i]
		%assign i i+1
	%endrep
%endif

; **** Forth code ****
SECTION .rodata align=1 follows=.text
FORTH:
	f_heya
	f_reg
	f_heya
	f_heya
	;f_exit


; **** Assembler code ****
SECTION .text align=1
rinit
%if ELF_CUSTOM
	ELF 1
	BASE	0x3d909000
%else
	_start:
%endif

%if WORD_NOTABLE && WORD_SIZE == 4
	set	CODE_OFFSET, FORTH
	%if WORD_FOOBEL
		jmp	[CODE_OFFSET]
	%else
		jmp	lastnext
	%endif
%elif WORD_NOTABLE && WORD_SIZE == 2
	set	CODE_OFFSET, FORTH
	set	TABLE_OFFSET, DEF0
	;movd	mm0, TABLE_OFFSET
	;movd	mm1, CODE_OFFSET
	jmp	lastnext
%else
	set	TABLE_OFFSET, STATIC_TABLE
	%assign	OFF FORTH-STATIC_TABLE
	lea	CODE_OFFSET, [TABLE_OFFSET+OFF]
	taint	CODE_OFFSET
	;movd	mm0, TABLE_OFFSET
	;movd	mm1, CODE_OFFSET
	jmp	lastnext
%endif


%if ELF_CUSTOM
	ELF_PHDR
	db	0
%endif

%include "regdump2.mac"


