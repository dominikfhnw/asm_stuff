%if 0

OUT=sntp
set -e
if [ -n "${FULL-}" ]; then
	nasm -I asmlib/ -f elf32 -o $OUT.o "$0" "$@" 2>&1 | grep -vF ': ... from macro '
	ld -m elf_i386 -z noseparate-code $OUT.o -o $OUT
	cp $OUT $OUT.full
	ls -l $OUT.full
	sstrip $OUT
else
	nasm -I asmlib/ -f bin -o $OUT "$0" "$@" 2>&1 | grep -vF ': ... from macro '
fi
ls -l $OUT
chmod +x $OUT

if [ -n "${FULL-}" ]; then
	objdump -d $OUT.full
else
	OFF=$(  readelf -lW $OUT 2>/dev/null | awk '$2=="0x000000"{print $3}')
	START=$(readelf -hW $OUT 2>/dev/null | awk '$1=="Entry"{print $4}')
	#objdump --no-addresses -b binary -m i386 -D $OUT --adjust-vma="$OFF" --start-address="$START"
	objdump -b binary -m i386 -D $OUT --adjust-vma="$OFF" --start-address="$START"
fi

set +e
ls -l $OUT
strace -rni ./$OUT 127.0.0.1
echo ret $?
exit


%endif

%define PORT	123
%define PAUSE	0
%define TIMEOUT	1
%define SET	1
%define LOCAL	0

%ifndef IP
%if LOCAL
	%define IP	127,0,0,1
%else
	%define IP	130,60,204,10
%endif
%endif

%define NTP_OFFSET 2_208_988_800 ; first day of unix vs NTP timestamp


%define REG_OPT	1
%include "stdlib.mac"
ELF

rinit

%if ELF_CUSTOM
	;BASE 0x05ffb000
	;add	eax, SYS_socket - 259
	;rset	eax, SYS_socket
	BASE 0x3d909000
	taint	eax
%endif

ELF_PHDR 1
;pop	eax
;pop	ebx
;pop	ecx
;set	eax, 4
;set	ebx, 1
pop	esi
pop	esi
pop	esi
;mov	esi, ecx
pop	ecx
pop	ecx
sub	ecx, esi
reg
;;int	0x80
taint	ecx

push	edi
mov	edi, esp
;zero	ebx
;mov	ecx, edx
.l:
	lodsb

	sub 	al, '0'
	reg
	js .sign
	add	ebx,ebx
	lea	ebx,[ebx*5]
	add	ebx, eax
	loop	.l
	.sign:
	xchg	eax, ebx
	stosb
	xchg	eax, ebx

	taint	ebx
	zero	ebx
	
	
	.next:

loop .l
;rdump
;taint	edx
;sub	edi, 4
mov	edi, [edi-4]
reg
;push	edi
;puts	esp, 4

exit 0
socket:
socket	AF_INET, SOCK_DGRAM, IPPROTO_IP

%define	SOCKET ebx
reg

xchg	eax, SOCKET
rset	eax, 2

%if TIMEOUT
timeout:
	alarm	SOCKET
%endif

connect:
connect	SOCKET, IP, PORT
reg

packet:
alloca	44
;push	 9 ; v1 client
;push	19 ; v2 client
push	35 ; v4 client
;two bytes longer:
;alloca	48
;mov	[esp], byte 0x9
mov	ecx, esp
send:
send	SOCKET, ecx, 48
reg

recv:
recv	SOCKET, ecx, 48
reg
decode:
mov	eax, [ecx+40]
test	eax, eax
jz	end2
bswap	eax
sub	eax, NTP_OFFSET

%if SET
	set:
	push	esi
	push	eax
	clock_settime CLOCK_REALTIME, esp
	reg
	%if PAUSE
		pause
	%else
	end1:
		xchg	eax, ebx
	end2:	inc	eax
		int	0x80
	%endif
%else
	printnumexit
%endif

%include "regdump2.mac"

