%macro doloop 1-2
	%ifid %2,push
		push ecx
		%push looppush
	%else
		%push loop
	%endif

	%if %1 == 0
		%fatal 0-time loops not supported
	%elif %1 == 1
		%define %$single 1
	%else
		%define %$single 0
	%endif

	set	ecx, %1
	%$loop:
%endmacro

%macro endloop 0
	%if %$single
		dec	ecx
	%else
		loop %$loop
	%endif

	%ifctx looppush
		pop ecx
		%pop looppush
	%else
		%pop loop
	%endif
%endmacro

%macro stos 1
	set eax, %1
	stosb
%endmacro

%define reg_fromzero 0
%define zero_fs 1
%imacro zero 1-*
	%rep %0
		%if reg_fromzero == 1
		%elif zero_fs
			mov	%1, gs
		%else
			xor	%1, %1
		%endif
	%rotate 1
	%endrep
%endmacro

%imacro regparse 1
	%defstr reg_str %1

	%substr reg_prefix reg_str 1,1
	%ifnidn reg_prefix,'e'
		%fatal 'set' with illegal register, %1, reg_prefix != 'e', pass __PASS__
	%endif

	%substr reg_id   reg_str 2,1

	%strcat reg_low  reg_id "l"
	%strcat reg_high reg_id "h"
	%strcat reg_leg  reg_id "x"

	%deftok reg_low  reg_low
	%deftok reg_high reg_high
	%deftok reg_leg  reg_leg
%endmacro

%imacro setfz 2
	regparse %1

	%if %2 == 0
		%assign rsave rsave+5
						;0 bytes
	%elif %2 == 1
		%assign rsave rsave+4
		inc	%1			;1 byte
	%elif %2 == -1
		%assign rsave rsave+4
		dec	%1			;1 byte
	%elif %2 < 256 && %2 >= 0
		%assign rsave rsave+3
		mov	reg_low, %2		;2 bytes
	%elif %2 % 256 == 0 && %2 >= 256 && %2 < 65536
		%assign rsave rsave+3
		mov	reg_high, %2/256	;2 bytes
	%elif %2 < 0 && %2 > -256
		%assign rsave rsave+2
		dec	%1
		mov	reg_low, (%2 & 0xFF)	;3 bytes
	%elif %2 < 65536
		%assign rsave rsave+1
		mov	reg_leg, %2		;4 bytes
	%else
		mov	%1, %2			;5 bytes
	%endif
%endmacro

%assign rsave 0
%imacro set 2
	regparse %1

	%ifnum %2
	%assign fo ~%2
	%else
	%assign fo 0
	%endif

	;%warning set __FILE__:__LINE__, %0 %1 %2 foo low, fo, pass __PASS__
	%ifid %2
		%if %1 == %2
		; nothing
		%else
		mov	%1, %2	; 2 bytes
		%endif
	%elif %2 == 0
		%assign rsave rsave+3
		zero	%1	; 2 bytes
	%elif %2 == 1
		%assign rsave rsave+2
		zero	%1
		inc	%1	; 3 bytes
	%elif %2 == -1
		%assign rsave rsave+2
		zero	%1
		dec	%1	; 3 bytes
	%elif %2 < 128 && fo < 129
		%assign rsave rsave+2
		push	%2
		pop	%1	; 3 bytes
	%elif %2 < 256 && %2 >= 0
		%assign rsave rsave+1
		zero	%1	; 4 bytes
		mov	reg_low, %2	
	%elif %2 % 256 == 0 && %2 >= 256 && %2 < 65536
		%assign rsave rsave+1
		zero	%1	; 4 bytes
		mov	reg_high, %2/256
	%elif %2 == 0xFFFF
		%assign rsave rsave+1
		zero	%1	; 4 bytes
		dec	reg_leg
	%else
		mov	%1, %2	; 5 bytes
	%endif
%endmacro
