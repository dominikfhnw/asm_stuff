%define SYS_write	4
%define SYS_exit	1

%imacro zero 1-*
	%rep %0
		xor	%1, %1
	%rotate 1
	%endrep
%endmacro

%imacro regfiddle 1
	%defstr bar %1
	%substr foo bar 2,1
	%substr baz bar 1,1
	%strcat lowstr foo "l"
	%strcat highstr foo "h"
	%strcat legstr foo "x"
	%deftok reg_low lowstr
	%deftok reg_high highstr
	%deftok reg_leg legstr
	%ifnidn baz,'e'
		%fatal 'set' with illegal register, %1, baz != 'e', pass __PASS__
	%endif
%endmacro

%imacro setfz 2
	regfiddle %1

	%if %2 == 0
						;0 bytes
	%elif %2 == 1
		inc	%1			;1 byte
	%elif %2 == -1
		dec	%1			;1 byte
	%elif %2 < 256 && %2 >= 0
		mov	reg_low, %2		;2 bytes
	%elif %2 % 256 == 0 && %2 >= 256 && %2 < 65536
		mov	reg_high, %2/256	;2 bytes
	%elif %2 < 0 && %2 > -256
		dec	%1
		mov	reg_low, (%2 & 0xFF)	;3 bytes
	%elif %2 < 65536
		mov	reg_leg, %2		;4 bytes
	%else
		mov	%1, %2			;5 bytes
	%endif
%endmacro

%imacro set 2
	regfiddle %1

	%ifnum %2
	%assign fo ~%2
	%else
	%assign fo 0
	%endif

	;%warning set __FILE__:__LINE__, %0 %1 %2 foo low, fo, pass __PASS__
	%ifid %2
		%if %1 == %2
		; nothing
		%else
		mov	%1, %2	; 3 bytes
		;push	%2
		;pop	%1	; 3 bytes
		%endif
	%elif %2 == 0
		zero	%1	; 2 bytes
	%elif %2 == 1
		zero	%1
		inc	%1	; 3 bytes
	%elif %2 == -1
		zero	%1
		dec	%1	; 3 bytes
	%elif %2 < 128 && fo < 129
		push	%2
		pop	%1	; 3 bytes
	%elif %2 < 256 && %2 >= 0
		zero	%1	; 4 bytes
		mov	reg_low, %2	
	%elif %2 % 256 == 0 && %2 >= 256 && %2 < 65536
		zero	%1	; 4 bytes
		mov	reg_high, %2/256
	%else
		mov	%1, %2	; 5 bytes
	%endif
%endmacro

%imacro sc_param 1-2
	%ifempty %2
		;%warning uhoh empty __LINE__, %0 %1 %2, pass __PASS__
	%elifidn %2,x
		;%warning uhoh x __LINE__, %0 %1 %2, pass __PASS__
	%elifidn %2,pop
		;%warning uhoh pop __LINE__, %0 %1 %2, pass __PASS__
		pop	%1
	%else
		set	%1, %2
	;%else
	;	%warning uhoh else __LINE__ %0 %1 %2, pass __PASS__
	%endif
%endmacro

%imacro sc_nr 1
	set	eax, %1
%endmacro

%imacro syscall 1-4
	sc_nr	%1
	%if %0 > 1
		sc_param ebx, %2
	%endif
	%if %0 > 2
		sc_param ecx, %3
	%endif
	%if %0 > 3
		sc_param edx, %4
	%endif
	int	0x80
%endmacro

%imacro exit 0-1 0
	syscall SYS_exit, %1
%endmacro

%imacro write 3
	;%warning WWWW uhoh x __LINE__ %0 %1 %2 %3, pass __PASS__
	syscall SYS_write, %1, %2, %3
%endmacro

%imacro puts 2
	write 1, %1, %2
%endmacro
