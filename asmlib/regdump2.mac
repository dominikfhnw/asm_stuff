%if DEBUG
; 164 byte full
;
; 58 byte no label
; 69 byte count label
; 83 byte 1byte label
; 94 byte full label

; count labels: 11 bytes
; 1byte labels: 25 bytes	+14 bytes
; full  labels: 36 bytes	+11 bytes

; each of those adds 4 byte of code and 1*REGS of stack used
;%define SPACE 1
%define NEWLINE 1
%define EXTENDED 0
%define FLAGS 1
%define IP 1
%define	STACK 0

%define LABEL 2
%define ALTLABEL 0

%if LABEL || ALTLABEL
%define SPACE 1
%else
%define SPACE 0
%endif

%if LABEL && ALTLABEL
%error cant have LABEL and ALTLABEL together
%endif

%assign REGS (9+IP+STACK)
%assign RECORD (8 + LABEL + ALTLABEL + SPACE + NEWLINE + EXTENDED)
%assign TOTAL ( (RECORD*REGS) + (2*NEWLINE) + (FLAGS*13) )
%warning TOTAL STACK ToOTAL
; eax ecx edx ebx esp ebp esi edi eflags
;  AX  CX  DX  BX  SP  BP  SI  DI  FL
;  A   C   D   B   S   P   s   d   f
;hlt

;times 8 db 0

regdump:
pusha
pushf			; save processor state on stack

regdump_nosave:
%if LABEL || FLAGS
call	.begin
.labels:
	%if FLAGS
	;db "FLG "
	db "."
	db "CrPrArZSTIDO"
	db 10
	%endif
	%if LABEL == 2
	db "FLDISIBPSPBXDXCXAX"
	%if IP
	db "IP"
	%endif
	%if STACK > 0
	db "S0S1S2"
	%endif
	;db "fldisibpspbxdxcxax"
	%elif LABEL == 1
	db "fdsPSBDCA"
	%if IP
	db "I"
	%endif
	%if STACK > 0
	db "012"
	%endif
	%endif
.begin:
pop	esi
mov	edx, esp
%else
mov	esi, esp
%endif

%if ALTLABEL
set	edx, 'Z'
%endif

; FLAGS still original here
; used elsewhere: esi, edx, esp, eax
; free: ebx, ecx
%if FLAGS
pushf
pop	ebx
%endif

add	esp, -TOTAL
mov	edi, esp	; alloca

cld
%if NEWLINE
	stos	0x0a
%endif


%if FLAGS
	push	edx

	; load header
	;lodsd
	;stosd

	; empty character
	lodsb
	xchg	eax, edx

	doloop 12, push
		lodsb
		ror	ebx, 1
		;jc	.c
		;mov	eax, edx
		;.c:
		cmovnc	eax, edx
		stosb
	endloop

	; nl
	lodsb
	stosb

	pop	edx
%endif


doloop	REGS
	%if EXTENDED
	stos	'E'		; whitespace
	%endif

	%if LABEL == 2
	lodsw			; load description text
	stosw			; store it
	%elif LABEL == 1
	lodsb			; load description text
	stosb			; store it
	%endif

	%if ALTLABEL
	mov	eax, edx
	stosb
	dec	edx
	%endif

	%if SPACE
	stos	0x20		; whitespace
	%endif

	%if LABEL || FLAGS
	xchg	edx, esi	; switch back to the pusha registers on the stack
	%endif

	push	ecx

		;; clobbers: eax, ebx, ecx
		lodsd
		mov	ebx, eax

		tohex	ebx

	pop	ecx

	%if LABEL || FLAGS
	xchg	edx, esi	; back again to description text
	%endif

	%if NEWLINE
	stos	0x0a
	%endif
endloop

%if NEWLINE
stosb
%endif

puts	esp, TOTAL

; partial memory cleanup +6 bytes
; popf/popa/ret not cleand up (40 bytes)
%define clearmem 0
%if clearmem
	;sub	edi, edx
	;add	esp, edx
	xchg	edi, esp

	set	eax, 0
	;mov	al, 0
	mov	ecx, edx
	rep	stosb
	;puts	esp, TOTAL
%else
	add	esp, edx
%endif
popf
popa
ret

%endif
